#!/usr/bin/python3

import sys
import os
import logging
import subprocess

if os.getuid() != 0:
    print("Get root pal!")
    sys.exit(2)

# get run path
binpath = os.path.abspath(sys.argv[0])
if os.path.islink(binpath):
    binpath = os.readlink(binpath)

# this is set up by kigen ebuild
if binpath == '/usr/sbin/kigen':
    # kigen is installed (likely by portage)
    libdir = '/usr/share/kigen'
    # FIXME: find another way to get the pyv, this won't work on debian
    pyv = os.popen('eselect python show --python3').read().strip()
    sys.path.append("/usr/lib/"+pyv+"/site-packages/kigen/modules")
else:
    # assume we run from current dir
    libdir = os.path.dirname(binpath)
    sys.path.append(libdir+'/modules')

# color hat trick
if "--nocolor" in sys.argv:
    from nocolor import green, turquoise, red, yellow, white
    os.environ['KIGEN_STDOUT'] = '1'
    # remove --nocolor from args, we don't want to see it again
    sys.argv.remove('--nocolor')
elif "-n" in sys.argv:
    from nocolor import green, turquoise, red, yellow, white
    os.environ['KIGEN_STDOUT'] = '1'
    # remove -n from args, we don't want to see it again
    sys.argv.remove('-n')
else:
    try:
        from portage.output import green, turquoise, red, yellow, white
        os.environ['KIGEN_STDOUT'] = '0'
    except:
        from nocolor import green, turquoise, red, yellow, white
        os.environ['KIGEN_STDOUT'] = '1'

# kigen modules are ready to be called
from default        import temp
from cliparser      import cli_parser
from utils.process  import *
from utils.fstab    import *
import utils

# parse command line parameters
master_conf,    \
kernel_conf,    \
modules_conf,   \
initramfs_conf, \
version_conf,   \
url_conf,       \
target,         \
cli,            \
verbose = cli_parser()

# FIXME because we get verbose['logfile'] from cli_parser()
# we can only start logging after here, that sucks ass big time
# NOFIX but then if fixed, means we can log the parsers
# useful? we already log the content of 
# master_conf, kernel_conf, modules_conf, initramfs_conf, version_conf, url_conf target, cli, verbose

# remove previous logfile
if os.path.isfile(verbose['logfile']):
    os.remove(verbose['logfile'])

# set logfile for DEBUG logging
logging.basicConfig(filename=verbose['logfile'],level=logging.DEBUG)

logging.debug('dumping /etc/kigen/master.conf')
logging.debug(master_conf)
logging.debug('dumping /etc/kigen/kernel/default.conf')
logging.debug(kernel_conf)
logging.debug('dumping /etc/kigen/initramfs/modules.conf')
logging.debug(modules_conf)
logging.debug('dumping /etc/kigen/initramfs/default.conf')
logging.debug(initramfs_conf)
logging.debug('dumping /etc/kigen/initramfs/version.conf')
logging.debug(version_conf)
logging.debug('dumping /etc/kigen/initramfs/url.conf')
logging.debug(url_conf)
logging.debug('dumping ARGV')
logging.debug(sys.argv)
logging.debug('kigen target is '+target)
logging.debug('dumping command line interface')
logging.debug(cli)
logging.debug(verbose)

# Funtoo bootupdate integration
from initramfs.bootupdate import get_boot_initrd
bootupdateinitrd = get_boot_initrd()
if bootupdateinitrd:
    bootupdateset = True
else:
    bootupdateset = False

logging.debug('Building on ' + cli['arch'])

# which Portage flavor?
flavor = utils.misc.identify_flavor()
logging.debug(flavor)

# show flavor
print(green(' * ')+white(flavor)+' on '+white(cli['arch']))

# ensure temp['work'] is clean
import shutil
if os.path.isdir(temp['work']):
    shutil.rmtree(temp['work'])
    os.makedirs(temp['work'])

# --nocache
if cli['nocache'] is True:
    if os.path.isdir(temp['cache']):
        logging.debug('deleting '+temp['cache'])

        # delete
        shutil.rmtree(temp['cache'])

        # re create
        logging.debug('creating '+temp['cache'])
        os.makedirs(temp['cache'])

# create temp[] dirs
try:
    logging.debug('creating '+temp['root'])
    os.makedirs(temp['root'])
except Exception:
    logging.debug(temp['root'] + ' already exists!')
try:
    logging.debug('creating '+temp['work'])
    os.makedirs(temp['work'])
except Exception:
    logging.debug(temp['work'] + ' already exists!')
try:
    logging.debug('creating '+temp['cache'])
    os.makedirs(temp['cache'])
except Exception:
    logging.debug(temp['cache'] + ' already exists!')
try:
    logging.debug('creating '+temp['distfiles'])
    os.makedirs(temp['distfiles'])
except Exception:
    logging.debug(temp['distfiles'] + ' already exists!')

boot_mounted = False
# run the kernel target
if target == 'kernel' or target == 'k':
    
        from kernel.kernel import kernel
        kobj = kernel(cli['kerneldir'],   \
                    master_conf,          \
                    kernel_conf,          \
                    cli['arch'],          \
                    cli['KV'],            \
                    cli,                  \
                    temp,                 \
                    verbose)
        try: 
            kobj.build()

        except KeyboardInterrupt:
            raise
    
        # copy kernel/system.map to /boot
        if (cli['noboot'] is False) or (cli['noboot'] == 'False'):
            if check_boot_mount() is True:
                logging.debug('>>> copying System.map')
        
                process('cp %s %s' % (cli['kerneldir'] + '/System.map', '/boot/System.map-kigen-'+cli['arch']+'-'+cli['KV']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize('/boot/System.map-kigen-'+cli['arch']+'-'+cli['KV'])/1024/1024, 1)))+'Mb'+' /boot/System.map-kigen-'+cli['arch']+'-'+cli['KV'])
        
                logging.debug('>>> copying kernel')
                process('cp %s %s' % (cli['kerneldir']+'/arch/x86/boot/bzImage', cli['rename']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize(cli['rename'])/1024/1024, 1)))+'Mb '+cli['rename'], end="")
    
                if cli['initramfs'] is not '':
                    print(' with an ' + white('embedded') + ' initramfs')
                else:
                    print()
            else:
                if check_boot_fstab() is True:
                    try:
                        mount_boot()
                        boot_mounted = True
                        print(green(' * ') + turquoise('boot.mounted'))
                    except:
                        print(red('!!!') + 'cannot mount /boot')
                        # FIXME: fallback to cli['noboot'] is True and don't fail
                        sys.exit(1)
    
                logging.debug('>>> copying System.map')
                process('cp %s %s' % (cli['kerneldir'] + '/System.map', '/boot/System.map-kigen-'+cli['arch']+'-'+cli['KV']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize('/boot/System.map-kigen-'+cli['arch']+'-'+cli['KV'])/1024/1024, 1)))+'Mb'+' /boot/System.map-kigen-'+cli['arch']+'-'+cli['KV'])
    
                logging.debug('>>> copying kernel')
                process('cp %s %s' % (cli['kerneldir']+'/arch/x86/boot/bzImage', cli['rename']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize(cli['rename'])/1024/1024, 1)))+'Mb '+cli['rename'], end="")
    
                if cli['initramfs'] is not '':
                    print(' with an ' + white('embedded') + ' initramfs')
                else:
                    print()
    
                if boot_mounted is True:
                    try:
                        umount_boot()
                        print(green(' * ') + turquoise('boot.umounted'))
                    except:
                        print(red('!!!') + 'cannot umount /boot')
                        sys.exit(1)
     
        # leave /boot alone but tell the user where to find his kernel/system.map
        elif (cli['noboot'] is True) or (cli['noboot'] == 'True'):
            logging.debug(cli['kerneldir']+'/System.map')
            print(green(' * success ') + cli['kerneldir']+'/System.map')
        
            logging.debug(cli['kerneldir']+'/arch/x86/boot/bzImage')
            print(green(' * success ') + cli['kerneldir']+'/arch/x86/boot/bzImage', end='')
            if cli['initramfs'] is not '':
                print('with an ' + white('embedded') + ' initramfs')
            else:
                print()

        # run module-rebuild for the sake of lazyness and/or ignorance
        if cli['module-rebuild'] is True:
            if os.path.isfile('/usr/sbin/module-rebuild'):
                os.system('module-rebuild populate')
                os.system('module-rebuild rebuild')
            else:
                print(red('!!!') + 'cannot find /usr/sbin/module-rebuild')
                sys.exit(2)

# run the initramfs target
if target == 'initramfs' or target == 'i':

        from initramfs.initramfs import initramfs
        iobj = initramfs(cli['kerneldir'],  \
                    cli['arch'],            \
                    cli['KV'],              \
                    libdir,                 \
                    master_conf,            \
                    modules_conf,           \
                    initramfs_conf,         \
                    version_conf,           \
                    url_conf,               \
                    cli,                    \
                    temp,                   \
                    bootupdateset,          \
                    bootupdateinitrd,       \
                    verbose)
        try:
            iobj.build()

        except KeyboardInterrupt:
            raise
    
        # copy initramfs to /boot
        if cli['noboot'] is False:
            if check_boot_mount() is True:
                logging.debug('>>> copying initramfs')
                process('cp %s/initramfs-cpio.gz %s' % (temp['cache'], cli['rename']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize(cli['rename'])/1024/1024, 1)))+'Mb'+' '+cli['rename'])
            else:
                if check_boot_fstab() is True:
                    try:
                        mount_boot()
                        boot_mounted = True
                        print(green(' * ') + turquoise('boot.mounted'))
                    except:
                        print(red('!!!') + 'cannot mount /boot')
                        # FIXME: fallback to cli['noboot'] is True and don't fail
                        sys.exit(1)
                
                logging.debug('>>> copying initramfs')
                process('cp %s/initramfs-cpio.gz %s' % (temp['cache'], cli['rename']), verbose)
                print(green(' * success ')+white(str(round(os.path.getsize(cli['rename'])/1024/1024, 1)))+'Mb'+' '+cli['rename'])
    
            if boot_mounted is True:
                try:
                    umount_boot()
                    print(green(' * ') + turquoise('boot.umounted'))
                except:
                    print(red('!!!') + 'cannot umount /boot')
                    sys.exit(1)
     
        # leave /boot alone but tell the user where to find his initramfs
        elif cli['noboot'] is True:
            logging.debug(temp['cache']+'/initramfs-cpio.gz')
            print(green(' * success ') + temp['cache']+'/initramfs-cpio.gz')

# run the tool target
if target == 'tool' or target == 't':

        if cli['rmcache']:
            print(green(' * ') + turquoise('tool.rmcache ')+ temp['cache'])
            if os.path.isdir(temp['cache']):
                shutil.rmtree(temp['cache'])

        # --extract
        if cli['extract']:
            import initramfs.extract
            initramfs.extract.initramfs(temp['work'], cli['extract'], cli['to'], verbose)
            sys.exit(0)

        # --compress
        if cli['compress']:
            import initramfs.compress
            initramfs.compress.initramfs(temp['work'], cli['compress'], cli['into'], verbose)
            sys.exit(0)

        # --getdotconfig
        if cli['getdotconfig'] is not '':
            from kernel.extract import getdotconfig
            getdotconfig(cli['getdotconfig'], cli['kerneldir'], verbose)
            sys.exit(0)

# FIXME unset os.environ['KIGEN_STDOUT']?

sys.exit(0)
